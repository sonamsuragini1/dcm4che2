- name: Generate PDF Report from SonarCloud
  env:
    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  run: |
    mkdir -p report
    cat <<EOF > generate_report.py
import requests
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os

SONAR_TOKEN = os.environ.get("SONAR_TOKEN")
component = "sonamsuragini1_dcm4che2"

# Fetch summary metrics
metrics_url = f"https://sonarcloud.io/api/measures/component?component={component}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density"
metrics_response = requests.get(metrics_url, auth=(SONAR_TOKEN, ""))
metrics_data = metrics_response.json()
metrics = {item["metric"]: item["value"] for item in metrics_data["component"]["measures"]}

# Fetch vulnerabilities
issues_url = f"https://sonarcloud.io/api/issues/search?componentKeys={component}&types=VULNERABILITY&ps=50"
issues_response = requests.get(issues_url, auth=(SONAR_TOKEN, ""))
issues_data = issues_response.json()
vulnerabilities = issues_data.get("issues", [])

# Generate PDF
c = canvas.Canvas("report/sonarcloud_report.pdf", pagesize=letter)
c.setFont("Helvetica-Bold", 16)
c.drawString(50, 750, "SonarCloud Report - dcm4che-core")

c.setFont("Helvetica", 12)
y = 720
for metric, value in metrics.items():
    c.drawString(50, y, f"{metric.replace('_', ' ').capitalize()}: {value}")
    y -= 20

y -= 10
c.setFont("Helvetica-Bold", 14)
c.drawString(50, y, "Security Vulnerabilities")
y -= 20
c.setFont("Helvetica", 11)

if not vulnerabilities:
    c.drawString(50, y, "No security vulnerabilities found.")
else:
    for issue in vulnerabilities:
        msg = issue.get("message", "No message")
        severity = issue.get("severity", "UNKNOWN")
        file_path = issue.get("component", "").split(":")[-1]
        line = issue.get("line", "N/A")
        rule = issue.get("rule", "").split(":")[-1]
        entry = f"[{severity}] {rule} in {file_path}:{line} â€” {msg}"
        for line_chunk in [entry[i:i+100] for i in range(0, len(entry), 100)]:
            c.drawString(50, y, line_chunk)
            y -= 15
            if y < 50:
                c.showPage()
                c.setFont("Helvetica", 11)
                y = 750
c.save()
EOF

    python3 generate_report.py
